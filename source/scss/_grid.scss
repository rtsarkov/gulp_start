/*
 * base on bootstrap 4
 */

@import 'mixins';

$collumns: 12;
$grid: (
	(
		bp: 'xs',
		pref: '',
		container: 100%,
		gutter: 10px
	),
	(
		bp: 'sm',
		pref: '-sm',
		container: 540px,
		gutter: 15px
	),
	(
		bp: 'md',
		pref: '-md',
		container: 720px,
		gutter: 15px
	),
	(
		bp: 'lg',
		pref: '-lg',
		container: 960px,
		gutter: 15px
	),
	(
		bp: 'xl',
		pref: '-xl',
		container: 1140px,
		gutter: 15px
	)
);

/* container */

.container {
	width: 100%;
	margin-right: auto;
	margin-left: auto;

	@for $i from 1 through length($grid) {
		$size: nth($grid, $i);
		$bp: map-get($size, bp);
		$gutter: map-get($size, gutter);
		$width: map-get($size, container);

		@if ($i == 1) {
			padding-right: $gutter;
			padding-left: $gutter;
		}
		@else {
			@include breakpoint($bp) {
				max-width: $width;
				padding-right: $gutter;
				padding-left: $gutter;
			}
		}
	}
}

/* row */

.row {
	display: flex;
	flex-wrap: wrap;

	@for $i from 1 through length($grid) {
		$size: nth($grid, $i);
		$bp: map-get($size, bp);
		$gutter: map-get($size, gutter);

		@if ($i == 1) {
			margin-right: -$gutter;
			margin-left: -$gutter;
		}
		@else {
			@include breakpoint($bp) {
				margin-right: -$gutter;
				margin-left: -$gutter;
			}
		}
	}
}

.no-gutters {
	margin-right: 0;
	margin-left: 0;

	> .col,
	> [class*="col-"] {
		padding-right: 0;
		padding-left: 0;
	}
}

/* col */

%col {
	position: relative;
	width: 100%;
	min-height: 1px;

	@for $i from 1 through length($grid) {
		$size: nth($grid, $i);
		$bp: map-get($size, bp);
		$gutter: map-get($size, gutter);

		@if ($i == 1) {
			padding-right: $gutter;
			padding-left: $gutter;
		}
		@else {
			@include breakpoint($bp) {
				padding-right: $gutter;
				padding-left: $gutter;
			}
		}
	}
}

@for $i from 1 through length($grid) {
	$size: nth($grid, $i);
	$pref: map-get($size, pref);
	$bp: map-get($size, bp);
	$gutter: map-get($size, gutter);

	// .col, .col-sm ...
	.col#{$pref} {
		@extend %col;

		@if ($i == 1) {
			max-width: 100%;
			flex-basis: 0;
			flex-grow: 1;
		}
		@else {
			@include breakpoint($bp) {
				max-width: 100%;
				flex-basis: 0;
				flex-grow: 1;
			}
		}
	}

	// .col-auto, .col-sm-auto ...
	.col#{$pref}-auto {
		@extend %col;

		@if ($i == 1) {
			width: auto;
			max-width: none;
			flex: 0 0 auto;
		}
		@else {
			@include breakpoint($bp) {
				width: auto;
				max-width: none;
				flex: 0 0 auto;
			}
		}
	}

	// .col-1, .col-2 ...
	@for $j from 1 through $collumns {
		.col#{$pref}-#{$j} {
			@extend %col;

			@if ($i == 1) {
				max-width: (100% / $collumns * $j);
				flex: 0 0 (100% / $collumns * $j);
			}
			@else {
				@include breakpoint($bp) {
					max-width: (100% / $collumns * $j);
					flex: 0 0 (100% / $collumns * $j);
				}
			}
		}
	}

    // .offset-0, .offset-1, .offset-2 ...
    .offset#{$pref}-0 {
        @if ($i == 1) {
            margin-left: 0;
        }
        @else {
            @include breakpoint($bp) {
                margin-left: 0;
            }
        }
    }
	@for $j from 1 through $collumns {
		.offset#{$pref}-#{$j} {
			@if ($i == 1) {
				margin-left: (100% / $collumns * $j);
			}
			@else if ($j < 12) {
				@include breakpoint($bp) {
					margin-left: (100% / $collumns * $j);
				}
			}
		}
	}

	// .order-first, .order-last ...
	.order#{$pref}-first {
		@if ($i == 1) {
			order: -1;
		}
		@else {
			@include breakpoint($bp) {
				order: -1;
			}
		}
	}
	.order#{$pref}-last {
		@if ($i == 1) {
			order: 13;
		}
		@else {
			@include breakpoint($bp) {
				order: 13;
			}
		}
	}

	// .order-1, .order-2 ...
	@for $j from 0 through $collumns {
		.order#{$pref}-#{$j} {
			@if ($i == 1) {
				order: $j;
			}
			@else {
				@include breakpoint($bp) {
					order: $j;
				}
			}
		}
	}
}

/* align-items */

$items: (
	start,
	end,
	center,
	baseline,
	stretch
);
@for $i from 1 through length($grid) {
	$size: nth($grid, $i);
	$pref: map-get($size, pref);
	$bp: map-get($size, bp);

	@each $item in $items {
		.align-items#{$pref}-#{$item} {
			@if ($item == 'start' or $item == 'end') {
				$item: 'flex-'+$item;
			}
			@if ($i == 1) {
				align-items: #{$item};
			}
			@else {
				@include breakpoint($bp) {
					align-items: #{$item};
				}
			}
		}
	}
}

/* justify-content */

$items: (
	start,
	end,
	center,
	between,
	around
);
@for $i from 1 through length($grid) {
	$size: nth($grid, $i);
	$pref: map-get($size, pref);
	$bp: map-get($size, bp);

	@each $item in $items {
		.justify-content#{$pref}-#{$item} {
			@if ($item == 'start' or $item == 'end') {
				$item: 'flex-'+$item;
			}
			@if ($item == 'between' or $item == 'around') {
				$item: 'space-'+$item;
			}
			@if ($i == 1) {
				justify-content: #{$item};
			}
			@else {
				@include breakpoint($bp) {
					justify-content: #{$item};
				}
			}
		}
	}
}

/* display */

$displays: (
	none,
	inline,
	inline-block,
	block,
	table,
	table-row,
	table-cell,
	flex,
	inline-flex
);
@for $i from 1 through length($grid) {
	$size: nth($grid, $i);
	$pref: map-get($size, pref);
	$bp: map-get($size, bp);

	@each $display in $displays {
		.d#{$pref}-#{$display} {
			@if ($i == 1) {
				display: $display !important;
			}
			@else {
				@include breakpoint($bp) {
					display: $display !important;
				}
			}
		}
	}
}